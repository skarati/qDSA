#ifndef MULT_H_
#define MULT_H_

#define ADD128U(C,A,B) {C = A+B;}
#define SUB128U(C,A,B) {C = A-B;}
#define MULT128U(C,A,B) {C = (u128)(A) * B;} // multiplies two 64-bit values and returns a 128-bit value
#define SHIFTL128U(C,A,B) {C = A << (B);}
#define SHIFTR128U(C,A,B) {C = A >> (B);}
#define AND128U(C,A,B) {C = A & B;}

u128 MULT128U2S0,MULT128U2T0,MULT128U2U0,MULT10128US1;
u128 MULT64U10U0,MULT64U10U1,MULT64U10U2,MULT64U10U3,MULT64U10U4; 
u128 MULT128U3S1,MULT128U3T1,MULT128U3U1,MULT128U3U2;
u128 MULT128U5S1,MULT128U5S2,MULT128U5T1,MULT128U5T2,MULT128U5U0,MULT128U5U1,MULT128U5U2,MULT128U5U3,MULT128U5U4;
u128 MULT128U10S0,MULT128U10S1,MULT128U10S2,MULT128U10S3,MULT128U10S4,MULT128U10T0,MULT128U10T1,MULT128U10T2,MULT128U10T3,MULT128U10T4,MULT128U10U0,MULT128U10U1,MULT128U10U2,MULT128U10U3,
	MULT128U10U4,MULT128U10U5,MULT128U10U6,MULT128U10U7,MULT128U10U8;

#define REDUCE2663(RES0,RES1,RES2,RES3,RES4,TEMP) { \
\
	REDUCEPARTA2663(RES0,RES1,RES2,RES3,RES4,TEMP); \
	REDUCEPARTB2663(RES0,RES1,RES2,RES3,RES4); \
}

#define REDUCEPARTA2663(RES0,RES1,RES2,RES3,RES4,TEMP) { /* 48 = 16*3 */ \
\
	SHIFTL128U(TEMP[5],TEMP[5],4); SHIFTL128U(TEMP[6],TEMP[6],4); SHIFTL128U(TEMP[7],TEMP[7],4); SHIFTL128U(TEMP[8],TEMP[8],4); \
\
	SHIFTL128U(MULT64U10U0,TEMP[5],1); SHIFTL128U(MULT64U10U1,TEMP[6],1); \
	SHIFTL128U(MULT64U10U2,TEMP[7],1); SHIFTL128U(MULT64U10U3,TEMP[8],1); \
 \
	ADD128U(MULT64U10U0,MULT64U10U0,TEMP[5]); ADD128U(MULT64U10U1,MULT64U10U1,TEMP[6]); \
	ADD128U(MULT64U10U2,MULT64U10U2,TEMP[7]); ADD128U(MULT64U10U3,MULT64U10U3,TEMP[8]); \
\
	ADD128U(RES0,TEMP[0],MULT64U10U0); ADD128U(RES1,MULT64U10U1,TEMP[1]); ADD128U(RES2,MULT64U10U2,TEMP[2]); ADD128U(RES3,TEMP[3],MULT64U10U3); \
	RES4=TEMP[4];\
\
}


#define REDUCEPARTB2663(RES0,RES1,RES2,RES3,RES4) { \
\
	SHIFTR128U(MULT128U10S1,RES0,54); AND128U(RES0,RES0,mask54); ADD128U(RES1,RES1,MULT128U10S1); \
	SHIFTR128U(MULT128U10S1,RES1,54); AND128U(RES1,RES1,mask54); ADD128U(RES2,RES2,MULT128U10S1); \
	SHIFTR128U(MULT128U10S1,RES2,54); AND128U(RES2,RES2,mask54); ADD128U(RES3,RES3,MULT128U10S1); \
	SHIFTR128U(MULT128U10S1,RES3,54); AND128U(RES3,RES3,mask54); ADD128U(RES4,RES4,MULT128U10S1); \
	SHIFTR128U(MULT128U10S1,RES4,50); AND128U(RES4,RES4,mask50); \
\
	SHIFTL128U(MULT128U10S2,MULT128U10S1,1); ADD128U(MULT128U10S2,MULT128U10S1,MULT128U10S2); \
	ADD128U(RES0,RES0,MULT128U10S2); \
	SHIFTR128U(MULT10128US1,RES0,54); AND128U(RES0,RES0,mask54); ADD128U(RES1,RES1,MULT10128US1); \
}

#endif
